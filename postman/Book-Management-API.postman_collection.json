{
  "info": {
    "name": "Book Management API",
    "description": "Complete API testing collection for Book Management System",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "üìö Books CRUD Operations",
      "item": [
        {
          "name": "Create Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has book data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.environment.set('bookId', jsonData.id);",
                  "    console.log('Created book with ID: ' + jsonData.id);",
                  "});",
                  "",
                  "pm.test(\"Book has correct data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql('The Great Gatsby');",
                  "    pm.expect(jsonData.author).to.eql('F. Scott Fitzgerald');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"The Great Gatsby\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"isbn\": \"978-0-7432-7356-5\",\n  \"publishedYear\": 1925,\n  \"description\": \"A classic American novel\",\n  \"price\": 29.99,\n  \"stockQuantity\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/books",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books"]
            }
          }
        },
        {
          "name": "Get All Books",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('totalElements');",
                  "    pm.expect(jsonData).to.have.property('totalPages');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books?page=0&size=10&sortBy=title&sortDir=asc",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books"],
              "query": [
                {"key": "page", "value": "0"},
                {"key": "size", "value": "10"},
                {"key": "sortBy", "value": "title"},
                {"key": "sortDir", "value": "asc"}
              ]
            }
          }
        },
        {
          "name": "Get Book by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has book data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('title');",
                  "    pm.expect(jsonData.id).to.eql(parseInt(pm.environment.get('bookId')));",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "{{bookId}}"]
            }
          }
        },
        {
          "name": "Update Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Book was updated\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.title).to.eql('The Great Gatsby - Updated Edition');",
                  "    pm.expect(jsonData.price).to.eql(35.99);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"The Great Gatsby - Updated Edition\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"isbn\": \"978-0-7432-7356-5\",\n  \"publishedYear\": 1925,\n  \"description\": \"A classic American novel - Updated description\",\n  \"price\": 35.99,\n  \"stockQuantity\": 150\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "{{bookId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "üîç Search Operations",
      "item": [
        {
          "name": "Search by Author",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/search/author?author=Fitzgerald",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "search", "author"],
              "query": [{"key": "author", "value": "Fitzgerald"}]
            }
          }
        },
        {
          "name": "Search by Title",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/search/title?title=Gatsby",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "search", "title"],
              "query": [{"key": "title", "value": "Gatsby"}]
            }
          }
        },
        {
          "name": "Search by Keyword",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has pagination\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('content');",
                  "    pm.expect(jsonData).to.have.property('totalElements');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/search?keyword=classic&page=0&size=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "search"],
              "query": [
                {"key": "keyword", "value": "classic"},
                {"key": "page", "value": "0"},
                {"key": "size", "value": "10"}
              ]
            }
          }
        }
      ]
    },
    {
      "name": "üìä Filter Operations",
      "item": [
        {
          "name": "Get Books by Year",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/year/1925",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "year", "1925"]
            }
          }
        },
        {
          "name": "Get Books by Price Range",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/price-range?minPrice=20.0&maxPrice=50.0",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "price-range"],
              "query": [
                {"key": "minPrice", "value": "20.0"},
                {"key": "maxPrice", "value": "50.0"}
              ]
            }
          }
        },
        {
          "name": "Get Low Stock Books",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/low-stock?threshold=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "low-stock"],
              "query": [{"key": "threshold", "value": "10"}]
            }
          }
        }
      ]
    },
    {
      "name": "‚ùå Error Examples",
      "item": [
        {
          "name": "Validation Error - Invalid Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Error response structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData).to.have.property('validationErrors');",
                  "    pm.expect(jsonData.status).to.eql(400);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"\",\n  \"author\": \"\",\n  \"isbn\": \"invalid-isbn\",\n  \"price\": -10.0,\n  \"stockQuantity\": -5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/books",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books"]
            }
          }
        },
        {
          "name": "Not Found Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 404\", function () {",
                  "    pm.response.to.have.status(404);",
                  "});",
                  "",
                  "pm.test(\"Error response structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "    pm.expect(jsonData.message).to.eql('Book Not Found');",
                  "    pm.expect(jsonData.status).to.eql(404);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/99999",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "99999"]
            }
          }
        },
        {
          "name": "Duplicate ISBN Error",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Duplicate ISBN error\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.message).to.eql('Validation Error');",
                  "    pm.expect(jsonData.details).to.include('already exists');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Duplicate Book\",\n  \"author\": \"Test Author\",\n  \"isbn\": \"978-0-7432-7356-5\",\n  \"publishedYear\": 2023,\n  \"description\": \"This should cause a duplicate ISBN error\",\n  \"price\": 29.99,\n  \"stockQuantity\": 100\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/books",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books"]
            }
          }
        }
      ]
    },
    {
      "name": "üóëÔ∏è Cleanup",
      "item": [
        {
          "name": "Delete Created Book",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "console.log('Deleted book with ID: ' + pm.environment.get('bookId'));"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "url": {
              "raw": "{{baseUrl}}/api/v1/books/{{bookId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "books", "{{bookId}}"]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    }
  ]
}